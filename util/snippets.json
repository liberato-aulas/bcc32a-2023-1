
{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Include básico": {
		"prefix": [".include-basico"],
		"body": [
			"#include<stdio.h>",
			"#include<stdlib.h>",
			"#include<string.h>",
			"#include<stdbool.h>",
			""			
		],
		"description": "Inclusão das bibliotecas básicas."
	},
	"stdio": {
		"prefix": [".stdio"],
		"body": [
			"#include <stdio.h>",
			""			
		],
		"description": "Include da biblioteca stdio."
	},
	"stdlib": {
		"prefix": [".stdlib"],
		"body": [
			"#include <stdlib.h>",
			""			
		],
		"description": "Include da biblioteca stdlib."
	},
	"string": {
		"prefix": [".string"],
		"body": [
			"#include <string.h>",
			""			
		],
		"description": "Include da biblioteca string."
	},
	"Função main SEM argumentos": {
		"prefix": [".main"],
		"body": [
			"int main(){",			
			"\t${0://code}",
			"\treturn 0;",
			"}"
		],
		"description": "Função main sem argumentos."
	},
	"Função main COM argumentos": {
		"prefix": [".main-com-argumentos"],
		"body": [
			"int main(int argc, char const *argv[]){",
			"\t${0://code}",
			"\treturn 0;",
			"}"
		],
		"description": "Função main com argumentos."
	},

	
	"scanf": {
		"prefix": [".scanf"],
		"body": [
			"scanf(\"%${1:d}\", &${2:var});"
		],
		"description": "scanf"
	},

	"printf": {
		"prefix": [".printf"],
		"body": [
			"printf(\"%${1:d}\\n\", ${2:var});"
		],
		"description": "printf"
	},

	"printf-linha-branco": {
		"prefix": [".printf-linha-em-branco"],
		"body": [
			"printf(\"\\n\");"
		],
		"description": "printf com linha em branco"
	},

	"for C com inicialização dentro": {
		"prefix": [".for-ini-dentro"],
		"body": [
			"for (${1:int} ${2:i}=0; ${2:i} < ${3:tam}; ${2:i}++){", 
			"\t${0://code}", 
			"}"
		],
		"description": "Laço de repetição FOR."
	},

	"for C com inicialização fora": {
		"prefix": [".for-ini-fora"],
		"body": [
			"${1:int} ${2:i};",
			"for (${2:i}=0; ${2:i} < ${3:tam}; ${2:i}++){", 
			"\t${0://code}",
			"}"
		],
		"description": "Laço de repetição FOR."
	},
	
	"if": {
		"prefix": [".if"],
		"body": [
			"if (${1://condition}){",
			"\t${0://code}",
			"}"
		],
		"description": "Desvio condicional if"
	},
	"if-else": {
		"prefix": [".ife"],
		"body": [
			"if (${1://condition}){",
			"\t${0://code}",
			"} else{",
			"",
			"}",
		],
		"description": "Desvio condicional if-else"
	},
	"função": {
		"prefix": [".func"],
		"body": [
			"${1:tipo} ${2:nome_da_funcao}(${3:/*parametros*/}){",
			"\t${0://code}",
			"}",
			"",
		],
		"description": "Função"
	},


	"Estrutura básica": {
		"prefix": [".estrutura-basica"],
		"body": [
			"#include<stdio.h>",
			"#include<stdlib.h>",
			"#include<string.h>",
			"#include<stdbool.h>",
			"",
			"int main(){",
			"\t${0://code}",
			"\treturn 0;",
			"}"
		],
		"description": "Estrutura básica de um programa."
	},

	"Estrutura básica com função": {
		"prefix": [".estrutura-basica-com-funcao"],
		"body": [
			"#include<stdio.h>",
			"#include<stdlib.h>",
			"#include<string.h>",
			"#include<stdbool.h>",
			"",
			"${1:tipo} ${2:nome_da_funcao}($3){",
			"\t${0://code}",
			"}",
			"",
			"int main(){",
			"\t",
			"\treturn 0;",
			"}"
		],
		"description": "Estrutura básica de um programa com uma função."
	},

	"Comentario bloco inicial": {
		"prefix": [".comentario-bloco"],
		"body": [
			"/***********************************************",
			"* ${0:COMENTARIO}",
			"************************************************/",
		],
		"description": "Estrutura básica de um programa com uma função."
	},


}